import pprint
import requests

'''Requests — это библиотека для выполнения HTTP-запросов на языке Python. Она создана для упрощения взаимодействия 
с API и веб-сервисами, получения данных с веб-сайтов и выполнения других задач на основе HTTP. Библиотека Requests 
не является частью стандартной библиотеки Python, поэтому её необходимо загрузить и установить отдельно. 
'''

response_1 = requests.get('https://httpbin.org')
print(response_1)  #Вернет нам код состояния. Если сервер ответил нормально, не возникло ошибок и запрашиваемый ресурс существует
                #то ответом будет <Response [200]>

response_1.encoding = 'utf-8' #Преобразует ответ в формат utf-8
var = response_1.headers  #Возвращает HTTP заголовки в виде словаря, что позволяет получить доступ к значению заголовка по ключу
print(var)

response_2 = requests.post('https://httpbin.org/post', data={'string_1': 'Hello', 'string_2': 'What is Requests?'})
print(response_2.text)  #Отправляет запрос на сервер на внесение информации указанной в data, используем для создания новых данных

response_3 = requests.put('https://httpbin.org/put', data={'string_3': 'Trying to understand Requests'}) #Используем
#для обновления имеющейся информации
print(response_3)
pprint.pprint(response_3.content)




import pandas as pd

'''Pandas может использоваться во всех процессах анализа данных. С помощью этой библиотеки можно:

Импортировать наборы данных из баз данных, электронных таблиц, CSV-файлов и т.д.
Очищать наборы данных, например, устраняя пропущенные значения.
Упорядочивать наборы данных путем преобразования их структуры в формат, пригодный для анализа.
Агрегировать данные, вычисляя сводную статистику, например, среднее значение столбцов, корреляцию между ними и т.д.
Визуализировать наборы данных и открывать новые возможности.
Pandas также имеет функционал для анализа временных рядов и текстовых данных.

Pandas хорошо работает с другими популярными пакетами Python для работы с данными, которые часто называют экосистемой PyData:

NumPy для численных вычислений
Matplotlib, Seaborn, Plotly для визуализации данных
scikit-learn для машинного обучения'''

df_1 = pd.read_csv('dataset.csv') #Создание DataFrame из файла с расширением .csv
df_2 = pd.read_csv('dataset.txt', sep='\s') #Создание DataFrame из файла с расширением .txt, необходимо
                                                           #указать разделитель. В нашем случае это знак пробела
df_3 = pd.read_json('dataset.json') #Создание DataFrame из файла с расширением .json

df_3.to_csv('dataset.csv', index=False) #Сохранение DataFrame в файл .csv

df_1.head() #Отображает первые 5 строк DataFrame. Можно задать свое значение.
df_1.tail() #Отображает последние 5 строк DataFrame. Можно задать свое значение.

df_1.describe() #выводит сводную статистику всех числовых столбцов, такую как количество, среднее значение,
                # стандартное отклонение, диапазон и квартили

df_1.describe().T #Транспонирование сводной статистики с помощью атрибута .T

df_1.info(show_counts=True, memory_usage=True, verbose=True) #устанавливаем аргумент show_counts равным True, что дает
# возможность увидеть общее количество не пропущенных значений в каждом столбце. Мы также устанавливаем значение
# memory_usage=True. memory_usage показывает общее использование памяти элементами DataFrame. Если для параметра verbose
# установлено значение True, то выводится полная сводка из .info()



import numpy as np

'''Кроме базового варианта (многомерные массивы в базовом варианте) NumPy включает в себя набор пакетов для решения 
специализированных задач, например:

- numpy.linalg — реализует операции линейной алгебры (простое умножение векторов и матриц есть в базовом варианте);
- numpy.random — реализует функции для работы со случайными величинами;
- numpy.fft — реализует прямое и обратное преобразование Фурье.
'''

# Преобразование списка в массив

A = np.array([[1, 2, 3], [4, 5, 6]])

#Копирование массива

B = A.copy()

#Создание нулевого или единичного массива заданного размера

A = np.zeros((2, 3))
B = np.ones((4, 5))

 # Либо создать нулевой массив с размерностью как у другого массива
B = np.zeros_like(A)

#Создание единичной диагональной матрицы 3x3

C = np.eye(3)

#Изменение размерности массива

A = np.arange(24)
B = A.reshape(4,6)
C = A.reshape(4, 3, 2)

#Узнать размерность массива, размер вдоль каждой оси, длину формы, количество элементов

A = np.arange(24)
C = A.reshape(4, 3, 2)

print(C.ndim, C.shape, len(C.shape), A.size)


